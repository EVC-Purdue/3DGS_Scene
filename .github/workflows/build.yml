name: Build and Push to GHCR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: evc-purdue/3dgs-image

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000
          env.BUILDKIT_STEP_LOG_MAX_SPEED=10000000

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=cuda12.1
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push with retry
      run: |
        # Function to retry push
        retry_push() {
          local max_attempts=5
          local attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Push attempt $attempt of $max_attempts"
            
            if docker buildx build \
              --platform linux/amd64 \
              --push \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cuda12.1 \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --cache-from type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache \
              --cache-to type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              . ; then
              echo "Push successful!"
              return 0
            else
              echo "Push failed, waiting 30 seconds before retry..."
              sleep 30
              attempt=$((attempt + 1))
            fi
          done
          
          echo "All push attempts failed"
          return 1
        }
        
        retry_push